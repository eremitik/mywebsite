[{"/Users/eremitik/play/tryjs/mywebsite/src/index.js":"1","/Users/eremitik/play/tryjs/mywebsite/src/App.js":"2","/Users/eremitik/play/tryjs/mywebsite/src/reportWebVitals.js":"3","/Users/eremitik/play/tryjs/mywebsite/src/views/Contact.js":"4","/Users/eremitik/play/tryjs/mywebsite/src/views/About.js":"5","/Users/eremitik/play/tryjs/mywebsite/src/views/Projects.js":"6","/Users/eremitik/play/tryjs/mywebsite/src/views/Home.js":"7","/Users/eremitik/play/tryjs/mywebsite/src/views/Lightsout/Board.js":"8","/Users/eremitik/play/tryjs/mywebsite/src/views/HistoricalPx/Histpx.js":"9","/Users/eremitik/play/tryjs/mywebsite/src/views/Usexplorer/Usexplorer.js":"10","/Users/eremitik/play/tryjs/mywebsite/src/views/Lightsout/Cell.js":"11"},{"size":666,"mtime":1631089492152,"results":"12","hashOfConfig":"13"},{"size":1159,"mtime":1631089067706,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1631089329175,"results":"15","hashOfConfig":"13"},{"size":3379,"mtime":1631089261302,"results":"16","hashOfConfig":"13"},{"size":2682,"mtime":1631090111861,"results":"17","hashOfConfig":"13"},{"size":3651,"mtime":1631090017162,"results":"18","hashOfConfig":"13"},{"size":1743,"mtime":1631089247659,"results":"19","hashOfConfig":"13"},{"size":2329,"mtime":1620881998000,"results":"20","hashOfConfig":"13"},{"size":5744,"mtime":1620881998000,"results":"21","hashOfConfig":"13"},{"size":5385,"mtime":1631089143400,"results":"22","hashOfConfig":"13"},{"size":742,"mtime":1620881998000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nd2u6a",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/eremitik/play/tryjs/mywebsite/src/index.js",[],"/Users/eremitik/play/tryjs/mywebsite/src/App.js",[],"/Users/eremitik/play/tryjs/mywebsite/src/reportWebVitals.js",[],"/Users/eremitik/play/tryjs/mywebsite/src/views/Contact.js",[],"/Users/eremitik/play/tryjs/mywebsite/src/views/About.js",[],"/Users/eremitik/play/tryjs/mywebsite/src/views/Projects.js",[],"/Users/eremitik/play/tryjs/mywebsite/src/views/Home.js",[],"/Users/eremitik/play/tryjs/mywebsite/src/views/Lightsout/Board.js",[],"/Users/eremitik/play/tryjs/mywebsite/src/views/HistoricalPx/Histpx.js",["48","49"],"import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {Link} from 'react-router-dom';\nimport './Histpx.css';\n\nconst crypto = {\n  '1INCH': '1inch',\n  'AAVE': 'aave',\n  'ADX': 'adex',\n  'AKRO': 'akropolis',\n  'ANT': 'aragon',\n  'APPC': 'appcoins',\n  'AST': 'airswap',\n  'BAL': 'balancer',\n  'BAND': 'band-protocol',\n  'BAT': 'basic-attention-token',\n  'BNT': 'bancor',\n  'BQX': 'ethos',\n  'BRD': 'bread',\n  'BTC': 'bitcoin',\n  'BTM': 'bytom',\n  'CHZ': 'chiliz',\n  'CND': 'cindicator',\n  'COMP': 'compound-governance-token',\n  'CRO': 'crypto-com-chain',\n  'CRV': 'curve-dao-token',\n  'DENT': 'dent',\n  'DLT': 'agrello',\n  'DOCK': 'dock',\n  'DODO': 'dodo',\n  'ENJ': 'enjincoin',\n  'ETH': 'ethereum',\n  'EVX': 'everex',\n  'GLM': 'golem',\n  'GRT': 'the-graph',\n  'GTO': 'gifto',\n  'HOT': 'holotoken',\n  'HT': 'huobi-token',\n  'KNC': 'kyber-network',\n  'LEO': 'leo-token',\n  'LINK': 'link',\n  'LRC': 'loopring',\n  'MANA': 'decentraland',\n  'MATIC': 'matic-network',\n  'MKR': 'maker',\n  'MTH': 'monetha',\n  'NEST': 'nest',\n  'NEXO': 'nexo',\n  'NMR': 'numeraire',\n  'OAX': 'openanx',\n  'OCEAN': 'ocean-protocol',\n  'OGN': 'origin-protocol',\n  'OMG': 'omisego',\n  'OST': 'simple-token',\n  'OXT': 'orchid-protocol',\n  'PAXG': 'pax-gold',\n  'PNT': 'pnetwork',\n  'POLY': 'polymath-network',\n  'POWR': 'power-ledger',\n  'REN': 'republic-protocol',\n  'RLC': 'iexec-rlc',\n  'RSR': 'reserve-rights-token',\n  'SNM': 'sonm',\n  'SNX': 'havven',\n  'SOC': 'all-sports',\n  'SRM': 'serum',\n  'STORJ': 'storj',\n  'SUSHI': 'sushi',\n  'SXP': 'swipe',\n  'TRU': 'truefi',\n  'UMA': 'uma',\n  'UNI': 'uniswap',\n  'UOP': 'utopia-genesis-foundation',\n  'VALUE': 'value-liquidity',\n  'WABI': 'wabi',\n  'wBTC': 'wrapped-bitcoin',\n  'YFI': 'yearn-finance',\n  'YFII': 'yfii-finance',\n  'ZRX': '0x'\n}\n\n\nconst cryptoNames = Object.values(crypto)\nconst tickers = Object.keys(crypto)\nconst days = 7\n\n\nconst urlCrypto = (crypto) => {\n  let cryptoArr = []\n  for(let i=0; i<cryptoNames.length; i++){\n    //cryptoArr.push(axios.get(`https://api.coingecko.com/api/v3/coins/${cryptoNames[i]}/market_chart?vs_currency=usd&days=${days}&interval=daily`))\n    cryptoArr.push(`https://api.coingecko.com/api/v3/coins/${cryptoNames[i]}/market_chart?vs_currency=usd&days=${days}&interval=daily`)\n  }\n  return cryptoArr\n}\nconst url = urlCrypto(crypto)\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms))\n\n\nfunction Histpx() {\n\n  const [coins, setCoins] = useState({ data: [] })\n  const [count, setCount] = useState(1)\n\n  const fetchUrl = async (url, index) => {\n    let priceArray = []\n    let coinObj = {}\n    return await axios.get(url).then((response) => {\n      const prices = response.data.prices;\n      for (let i=0; i<prices.length; i++){\n        priceArray.push(prices[i][1])\n      }\n      coinObj.symbol = tickers[index]\n      coinObj.prices = priceArray\n      return coinObj\n    })\n  }\n\n  const fetchData = () => {\n    (async () => {\n      let arrayQ = [];\n      let cycles = 1\n      for (let i=0; i<url.length; i++){\n        await delay(800);\n        await fetchUrl(url[i], i).then((coinObj) => {\n          arrayQ.push(coinObj);\n          setCoins({ data: [...data, coinObj] });\n          setCount(cycles++)\n        })\n        setCoins({ data: [...arrayQ] })\n      }\n    })()\n  }\n\n  const addCount = () => {\n    setCount(count + 1)\n  }\n \n  useEffect(()=>{                                                                                                                     \n      fetchData();                                                                                                                        \n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[]);                                                                                                                                \n\n  const {data} = coins\n\n  /*\n  const copyTable = () => {\n    const elTable = document.querySelector('coin-table');\n    let range;\n    let sel;\n\n    if (document.createRange && window.getSelection) {\n\n      range = document.createRange();\n      sel = window.getSelection();\n      sel.removeAllRanges();\n\n      try {\n        range.selectNodeContents(elTable);\n        sel.addRange(range);\n      } catch (e) {\n        range.selectNode(elTable);\n        sel.addRange(range);\n      }\n\n      document.execCommand('copy');\n    }\n\n    sel.removeAllRanges();\n    console.log('Element copied! Paste it in a file')\n  }\n  */\n\n  return (\n    <div className=\"coin-app\">\n      <h1 style={{textAlign: \"center\"}}>ðŸ“ˆHistorical prices</h1>\n      <p style={{textAlign: \"center\"}}>This project was made with Coingecko API.<br/>{url.length - count} crypto left to go.</p>\n      <table className=\"coin-table\" id=\"coin-table\"> \n        <thead>\n        <tr>\n          <th style={{width:'50px'}}>Symbol</th>\n          <th style={{width:'200px'}}>T-8</th>\n          <th style={{width:'200px'}}>T-7</th>\n          <th style={{width:'200px'}}>T-6</th>\n          <th style={{width:'200px'}}>T-5</th>\n          <th style={{width:'200px'}}>T-4</th>\n          <th style={{width:'200px'}}>T-3</th>\n          <th style={{width:'200px'}}>T-2</th>\n          <th style={{width:'200px'}}>T-1</th>\n        </tr>\n        </thead>\n      <tbody>\n        {data.map(function (coin, index) {\n          return (\n            <tr key={coin.symbol}>\n              <td>{coin.symbol}</td>\n              {coin.prices.map((price, index) => {\n                return <td key={index}>{price}</td>\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n      </table>\n      <p style={{textAlign:\"center\", fontSize:\"8rem\", fontWeight:\"bold\", letterSpacing:\"-4px\"}}>\n         <Link to='/projects'>back</Link>\n      </p>\n\n    </div>\n  );\n}\n\nexport default Histpx;\n","/Users/eremitik/play/tryjs/mywebsite/src/views/Usexplorer/Usexplorer.js",["50"],"import React from 'react'\nimport { HashRouter as Router, Link } from 'react-router-dom';\nimport './Usexplorer.css'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport uniswapLogo from '../../images/uniswap-logo.png'\nimport daiLogo from '../../images/dai-logo.png'\nimport zeroxLogo from '../../images/zerox.png'\n\nexport const client = new ApolloClient({\n  link: new HttpLink({\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2'\n  }),\n  fetchOptions: {\n    mode: 'no-cors'\n  },\n  cache: new InMemoryCache()\n})\n\nconst DAI_QUERY = gql`\n  query tokens($tokenAddress: Bytes!){\n    tokens(where: {id: $tokenAddress}){\n      derivedETH\n      tradeVolumeUSD\n    }\n  }\n`\n\nconst ETH_PRICE_QUERY = gql`\n  query bundles {\n    bundles(where: {id: \"1\"}){\n      ethPrice\n    }\n  }\n`\n\nconst UNI_QUERY = gql`\n  query tokens($tokenAddress: Bytes!){\n    tokens(where: {id: $tokenAddress}){\n      derivedETH\n      tradeVolumeUSD \n    }\n  }\n`\n\nconst ZRX_QUERY = gql`\n  query token($tokenAddress: Bytes!){\n    tokens(where: {id: $tokenAddress}){\n      derivedETH\n      tradeVolumeUSD\n    }\n  }\n`\n\nfunction Usexplorer() {\n  const {loading: ethLoading, data: ethPriceData} = useQuery(ETH_PRICE_QUERY)\n  const {loading: daiLoading, data: daiData} = useQuery(DAI_QUERY, {\n    variables: {\n      tokenAddress: '0x6b175474e89094c44da98b954eedeac495271d0f'\n    }\n  })\n  const {loading: uniLoading, data: uniData} = useQuery(UNI_QUERY, {\n    variables: {\n      tokenAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984'\n    }\n  })\n  const {loading: zrxLoading, data: zrxData} = useQuery(ZRX_QUERY, {\n    variables: {\n      tokenAddress: '0xe41d2489571d322189246dafa5ebde1f4699f498'\n    }\n  })\n\n  const daiPriceInEth = daiData && daiData.tokens[0].derivedETH\n  const daiTradeVolumeUSD = daiData && daiData.tokens[0].tradeVolumeUSD\n  const uniPriceInEth = uniData && uniData.tokens[0].derivedETH\n  const uniTradeVolumeUSD = uniData && uniData.tokens[0].tradeVolumeUSD\n  const zrxPriceInEth = zrxData && zrxData.tokens[0].derivedETH\n  const zrxTradeVolumeUSD = zrxData && zrxData.tokens[0].tradeVolumeUSD\n  const ethPriceInUSD = ethPriceData && ethPriceData.bundles[0].ethPrice\n\n  function formatNum(n) {\n    return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  }\n\n  return (\n    <div className=\"Usexplorer\">\n      <div style={{textAlign:\"center\"}}>\n        <h1 style={{fontSize:\"2.5rem\", fontWeight:\"bold\"}}>ðŸ¦„Uniswap Explorer</h1>\n        <p style={{fontSize:\"0.8rem\"}}>This simple page was made with GraphQL, using &nbsp; \n          <a href=\"https://thegraph.com/explorer/subgraph/uniswap/uniswap-v2?query=Example%20query\">Uniswap V2 subgraph.</a></p>\n      <div >\n        <br/>\n\n        <div style={{display:\"inline-block\"}}>\n\n          <div style={{textAlign:\"left\", fontSize:\"1rem\"}}>\n                <p>\n                <img src={daiLogo} width=\"30\" height=\"30\" className=\"mb-2\" alt=\"\" />\n                  DAI (Dai Stable Token) \n                  <br/>\n                  Price: {' '}\n                  {ethLoading || daiLoading\n                    ? 'Loading token data...'\n                    : '$' + \n                    (parseFloat(daiPriceInEth) * parseFloat(ethPriceInUSD)).toFixed(2)}\n                  <br/>\n                  Trade volume:{' '}\n                  {daiLoading\n                    ? 'Loading token data...'\n                    : '$' + formatNum(parseFloat(daiTradeVolumeUSD).toFixed(0))}\n                </p>\n              </div>\n              <br/>\n\n              <div style={{textAlign:\"left\", fontSize:\"1rem\"}}>\n                <p>\n                <img src={uniswapLogo} width=\"30\" height=\"30\" className=\"mb-2\" alt=\"\" />\n                  UNI (Uniswap)\n                  <br/>\n                  Price: {' '}\n                  {ethLoading || uniLoading\n                    ? 'Loading token data...'\n                    : '$' + \n                    (parseFloat(uniPriceInEth) * parseFloat(ethPriceInUSD)).toFixed(2)}\n                  <br/>\n                  Trade volume:{' '}\n                  {uniLoading\n                    ? 'Loading token data...'\n                    : '$' + formatNum(parseFloat(uniTradeVolumeUSD).toFixed(0))}\n                </p>\n              </div>\n              <br/>\n\n              <div style={{textAlign:\"left\", fontSize:\"1rem\"}}>\n                <p>\n                <img src={zeroxLogo} width=\"30\" height=\"30\" className=\"mb-2\" alt=\"\" />\n                  ZRX (0x Protocol)\n                  <br/>\n                  Price: {' '}\n                  {ethLoading || zrxLoading\n                    ? 'Loading token data...'\n                    : '$' + \n                    (parseFloat(zrxPriceInEth) * parseFloat(ethPriceInUSD)).toFixed(2)}\n                  <br/>\n                  Trade volume:{' '}\n                  {zrxLoading\n                    ? 'Loading token data...'\n                    : '$' + formatNum(parseFloat(zrxTradeVolumeUSD).toFixed(0))}\n                </p>\n\n              </div>\n            </div>\n        </div>\n      </div>\n        <p style={{letterSpacing:\"-4px\", fontSize:\"8rem\", color:\"white\", fontWeight:\"bold\", textAlign:\"center\"}}><Link to='/projects'>back</Link>\n        </p>\n    </div>\n    \n  );\n}\n\nexport default Usexplorer;\n","/Users/eremitik/play/tryjs/mywebsite/src/views/Lightsout/Cell.js",[],{"ruleId":"51","severity":1,"message":"52","line":125,"column":40,"nodeType":"53","messageId":"54","endLine":129,"endColumn":10},{"ruleId":"55","severity":1,"message":"56","line":135,"column":9,"nodeType":"57","messageId":"58","endLine":135,"endColumn":17},{"ruleId":"55","severity":1,"message":"59","line":2,"column":24,"nodeType":"57","messageId":"58","endLine":2,"endColumn":30},"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'cycles'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'addCount' is assigned a value but never used.","Identifier","unusedVar","'Router' is defined but never used."]